{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Context\n",
    "\n",
    "The dataset contains historical product demand for a manufacturing company with footprints globally. The company provides thousands of products within dozens of product categories. There are four central warehouses to ship products within the region it is responsible for. Since the products are manufactured in different locations all over the world, it normally takes more than one month to ship products via ocean to different central warehouses. If forecasts for each product in different central with reasonable accuracy for the monthly demand for month after next can be achieved, it would be beneficial to the company in multiple ways.\n",
    "\n",
    "## Inspiration\n",
    "Is it possible to make forecasts for thousands of products (some of them are highly variable in terms of monthly demand) for the the month after next?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "1. What is the demand change by SKU day by day?\n",
    "2. Who is the average top demand product?\n",
    "3. Which cateogory sells the best?\n",
    "4. What is the average capacity for each warehouse?\n",
    "5. Which warehouse carry the most SKUs?\n",
    "6. What the volumne trend by SKUs?\n",
    "7. Which SKU is the best seller?\n",
    "8. Should I drop the missing data?\n",
    "\n",
    "## Insights\n",
    "1. There are 33 categories, 2160 SKUs, and 4 warehouses\n",
    "2. We have missing dates of 11239\n",
    "3. There are 1048575 rows of data\n",
    "\n",
    "## Goal\n",
    "Since the average lead time takes 30 days from sourcing to warehouses, we are going to predict the next 30 days demand by warehouse by sku to help the company in a good inventory shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:30:09.258492Z",
     "start_time": "2020-07-29T02:30:07.109582Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:30:10.206625Z",
     "start_time": "2020-07-29T03:30:08.660523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Code</th>\n",
       "      <th>Warehouse</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Date</th>\n",
       "      <th>Order_Demand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Product_0993</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_028</td>\n",
       "      <td>2012-07-27</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Product_0979</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_028</td>\n",
       "      <td>2012-01-19</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Product_0979</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_028</td>\n",
       "      <td>2012-02-03</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Product_0979</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_028</td>\n",
       "      <td>2012-02-09</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Product_0979</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_028</td>\n",
       "      <td>2012-03-02</td>\n",
       "      <td>500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048570</th>\n",
       "      <td>Product_1791</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_006</td>\n",
       "      <td>2016-04-27</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048571</th>\n",
       "      <td>Product_1974</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_006</td>\n",
       "      <td>2016-04-27</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048572</th>\n",
       "      <td>Product_1787</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_006</td>\n",
       "      <td>2016-04-28</td>\n",
       "      <td>2500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048573</th>\n",
       "      <td>Product_0901</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_023</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048574</th>\n",
       "      <td>Product_0704</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_001</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1048575 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Product_Code Warehouse Product_Category       Date Order_Demand\n",
       "0        Product_0993    Whse_J     Category_028 2012-07-27         100 \n",
       "1        Product_0979    Whse_J     Category_028 2012-01-19         500 \n",
       "2        Product_0979    Whse_J     Category_028 2012-02-03         500 \n",
       "3        Product_0979    Whse_J     Category_028 2012-02-09         500 \n",
       "4        Product_0979    Whse_J     Category_028 2012-03-02         500 \n",
       "...               ...       ...              ...        ...          ...\n",
       "1048570  Product_1791    Whse_J     Category_006 2016-04-27        1000 \n",
       "1048571  Product_1974    Whse_J     Category_006 2016-04-27           1 \n",
       "1048572  Product_1787    Whse_J     Category_006 2016-04-28        2500 \n",
       "1048573  Product_0901    Whse_J     Category_023 2016-10-07          50 \n",
       "1048574  Product_0704    Whse_J     Category_001 2016-06-27           4 \n",
       "\n",
       "[1048575 rows x 5 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Historical Product Demand.csv\", parse_dates=[\"Date\"])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:31:30.367806Z",
     "start_time": "2020-07-29T02:31:30.140736Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1048575 entries, 0 to 1048574\n",
      "Data columns (total 5 columns):\n",
      " #   Column            Non-Null Count    Dtype         \n",
      "---  ------            --------------    -----         \n",
      " 0   Product_Code      1048575 non-null  object        \n",
      " 1   Warehouse         1048575 non-null  object        \n",
      " 2   Product_Category  1048575 non-null  object        \n",
      " 3   Date              1037336 non-null  datetime64[ns]\n",
      " 4   Order_Demand      1048575 non-null  object        \n",
      "dtypes: datetime64[ns](1), object(4)\n",
      "memory usage: 40.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:31:44.896071Z",
     "start_time": "2020-07-29T02:31:44.698711Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product_Code            0\n",
       "Warehouse               0\n",
       "Product_Category        0\n",
       "Date                11239\n",
       "Order_Demand            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:35:41.846816Z",
     "start_time": "2020-07-29T02:35:41.729731Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array(['Category_028', 'Category_006', 'Category_001', 'Category_019',\n",
       "        'Category_005', 'Category_030', 'Category_032', 'Category_011',\n",
       "        'Category_033', 'Category_007', 'Category_015', 'Category_021',\n",
       "        'Category_024', 'Category_026', 'Category_023', 'Category_022',\n",
       "        'Category_009', 'Category_003', 'Category_004', 'Category_018',\n",
       "        'Category_020', 'Category_013', 'Category_008', 'Category_017',\n",
       "        'Category_031', 'Category_025', 'Category_010', 'Category_029',\n",
       "        'Category_012', 'Category_002', 'Category_014', 'Category_027',\n",
       "        'Category_016'], dtype=object),\n",
       " 33)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 33 Categories\n",
    "df.Product_Category.unique(), df.Product_Category.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:37:15.654504Z",
     "start_time": "2020-07-29T02:37:15.535249Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array(['Product_0993', 'Product_0979', 'Product_1159', ...,\n",
       "        'Product_0237', 'Product_0644', 'Product_0853'], dtype=object),\n",
       " 2160)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2160 SKUs\n",
    "df.Product_Code.unique(), df.Product_Code.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:36:32.543066Z",
     "start_time": "2020-07-29T02:36:32.430490Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array(['Whse_J', 'Whse_S', 'Whse_C', 'Whse_A'], dtype=object), 4)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4 warehouses\n",
    "df.Warehouse.unique(), df.Warehouse.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:31:47.385166Z",
     "start_time": "2020-07-29T02:31:47.373270Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2012-07-27\n",
       "1     2012-01-19\n",
       "2     2012-02-03\n",
       "3     2012-02-09\n",
       "4     2012-03-02\n",
       "         ...    \n",
       "995   2012-09-28\n",
       "996   2012-12-12\n",
       "997   2012-01-31\n",
       "998   2012-03-02\n",
       "999   2012-03-02\n",
       "Name: Date, Length: 1000, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Date[:1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T02:33:25.839967Z",
     "start_time": "2020-07-29T02:33:24.823596Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(df['Date'][:500],df['Order_Demand'][:500]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:41:35.998023Z",
     "start_time": "2020-07-29T03:41:35.626246Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Code</th>\n",
       "      <th>Warehouse</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Date</th>\n",
       "      <th>Order_Demand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44799</th>\n",
       "      <td>Product_0965</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_006</td>\n",
       "      <td>2011-01-08</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72252</th>\n",
       "      <td>Product_1724</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_003</td>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8431</th>\n",
       "      <td>Product_1521</td>\n",
       "      <td>Whse_S</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2011-06-24</td>\n",
       "      <td>85000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8432</th>\n",
       "      <td>Product_1521</td>\n",
       "      <td>Whse_S</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2011-06-24</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72669</th>\n",
       "      <td>Product_1507</td>\n",
       "      <td>Whse_C</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2011-09-02</td>\n",
       "      <td>1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995790</th>\n",
       "      <td>Product_1464</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>NaT</td>\n",
       "      <td>(900)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995791</th>\n",
       "      <td>Product_1541</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>NaT</td>\n",
       "      <td>(200)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995792</th>\n",
       "      <td>Product_1388</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>NaT</td>\n",
       "      <td>(300)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995793</th>\n",
       "      <td>Product_1541</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>NaT</td>\n",
       "      <td>(300)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995794</th>\n",
       "      <td>Product_1509</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>NaT</td>\n",
       "      <td>(200)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1048575 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Product_Code Warehouse Product_Category       Date Order_Demand\n",
       "44799   Product_0965    Whse_A     Category_006 2011-01-08           2 \n",
       "72252   Product_1724    Whse_A     Category_003 2011-05-31         108 \n",
       "8431    Product_1521    Whse_S     Category_019 2011-06-24       85000 \n",
       "8432    Product_1521    Whse_S     Category_019 2011-06-24        7000 \n",
       "72669   Product_1507    Whse_C     Category_019 2011-09-02        1250 \n",
       "...              ...       ...              ...        ...          ...\n",
       "995790  Product_1464    Whse_A     Category_019        NaT        (900)\n",
       "995791  Product_1541    Whse_A     Category_019        NaT        (200)\n",
       "995792  Product_1388    Whse_A     Category_019        NaT        (300)\n",
       "995793  Product_1541    Whse_A     Category_019        NaT        (300)\n",
       "995794  Product_1509    Whse_A     Category_019        NaT        (200)\n",
       "\n",
       "[1048575 rows x 5 columns]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort Date by ASC\n",
    "df.sort_values(by=[\"Date\"], inplace=True, ascending=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:44:21.157453Z",
     "start_time": "2020-07-29T03:44:19.502283Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1048575 entries, 44799 to 995794\n",
      "Data columns (total 5 columns):\n",
      " #   Column            Non-Null Count    Dtype         \n",
      "---  ------            --------------    -----         \n",
      " 0   Product_Code      1048575 non-null  object        \n",
      " 1   Warehouse         1048575 non-null  object        \n",
      " 2   Product_Category  1048575 non-null  object        \n",
      " 3   Date              1037336 non-null  datetime64[ns]\n",
      " 4   Order_Demand      1048575 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(3)\n",
      "memory usage: 48.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# df.Order_Demand = df.Order_Demand.replace('(',\"-\").replace(')',\"\")\n",
    "df.Order_Demand = df.Order_Demand.str.replace('(','')\n",
    "df.Order_Demand = df.Order_Demand.str.replace(')','')\n",
    "df.Order_Demand = df.Order_Demand.astype('int')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:15:31.219970Z",
     "start_time": "2020-07-29T03:15:31.206703Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(82, array(['Whse_A'], dtype=object))"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What is missing?\n",
    "df_na = df[df.Date.isnull()]\n",
    "df_na.Product_Code.nunique(), df_na.Warehouse.unique()\n",
    "# It looks like we have trouble on Warehouse A for the records\n",
    "# Let's check how many total rows for Warehouse A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:17:15.665679Z",
     "start_time": "2020-07-29T03:17:15.501907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product_Code        153574\n",
       "Warehouse           153574\n",
       "Product_Category    153574\n",
       "Date                142335\n",
       "Order_Demand        153574\n",
       "dtype: int64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The total record of Warehouse A is 153574\n",
    "df[df.Warehouse=='Whse_A'].count()\n",
    "\n",
    "# Should we drop the data without dates?\n",
    "# What percentage of total data would impact"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop NA date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:44:43.295562Z",
     "start_time": "2020-07-29T03:44:42.727619Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1037336 entries, 44799 to 908844\n",
      "Data columns (total 5 columns):\n",
      " #   Column            Non-Null Count    Dtype         \n",
      "---  ------            --------------    -----         \n",
      " 0   Product_Code      1037336 non-null  object        \n",
      " 1   Warehouse         1037336 non-null  object        \n",
      " 2   Product_Category  1037336 non-null  object        \n",
      " 3   Date              1037336 non-null  datetime64[ns]\n",
      " 4   Order_Demand      1037336 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(3)\n",
      "memory usage: 47.5+ MB\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df_tmp = df.copy()\n",
    "df_tmp = df_tmp.dropna()\n",
    "df_tmp.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:44:47.202540Z",
     "start_time": "2020-07-29T03:44:47.182278Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Code</th>\n",
       "      <th>Warehouse</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Date</th>\n",
       "      <th>Order_Demand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44799</th>\n",
       "      <td>Product_0965</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_006</td>\n",
       "      <td>2011-01-08</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72252</th>\n",
       "      <td>Product_1724</td>\n",
       "      <td>Whse_A</td>\n",
       "      <td>Category_003</td>\n",
       "      <td>2011-05-31</td>\n",
       "      <td>108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8431</th>\n",
       "      <td>Product_1521</td>\n",
       "      <td>Whse_S</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2011-06-24</td>\n",
       "      <td>85000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8432</th>\n",
       "      <td>Product_1521</td>\n",
       "      <td>Whse_S</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2011-06-24</td>\n",
       "      <td>7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72669</th>\n",
       "      <td>Product_1507</td>\n",
       "      <td>Whse_C</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2011-09-02</td>\n",
       "      <td>1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>919651</th>\n",
       "      <td>Product_1926</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_001</td>\n",
       "      <td>2017-01-06</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>920149</th>\n",
       "      <td>Product_0025</td>\n",
       "      <td>Whse_J</td>\n",
       "      <td>Category_005</td>\n",
       "      <td>2017-01-06</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863020</th>\n",
       "      <td>Product_1904</td>\n",
       "      <td>Whse_C</td>\n",
       "      <td>Category_019</td>\n",
       "      <td>2017-01-09</td>\n",
       "      <td>4000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>908447</th>\n",
       "      <td>Product_0250</td>\n",
       "      <td>Whse_C</td>\n",
       "      <td>Category_007</td>\n",
       "      <td>2017-01-09</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>908844</th>\n",
       "      <td>Product_0471</td>\n",
       "      <td>Whse_C</td>\n",
       "      <td>Category_015</td>\n",
       "      <td>2017-01-09</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1037336 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Product_Code Warehouse Product_Category       Date  Order_Demand\n",
       "44799   Product_0965    Whse_A     Category_006 2011-01-08             2\n",
       "72252   Product_1724    Whse_A     Category_003 2011-05-31           108\n",
       "8431    Product_1521    Whse_S     Category_019 2011-06-24         85000\n",
       "8432    Product_1521    Whse_S     Category_019 2011-06-24          7000\n",
       "72669   Product_1507    Whse_C     Category_019 2011-09-02          1250\n",
       "...              ...       ...              ...        ...           ...\n",
       "919651  Product_1926    Whse_J     Category_001 2017-01-06             2\n",
       "920149  Product_0025    Whse_J     Category_005 2017-01-06           400\n",
       "863020  Product_1904    Whse_C     Category_019 2017-01-09          4000\n",
       "908447  Product_0250    Whse_C     Category_007 2017-01-09           148\n",
       "908844  Product_0471    Whse_C     Category_015 2017-01-09            30\n",
       "\n",
       "[1037336 rows x 5 columns]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-07-29T03:50:53.640994Z",
     "start_time": "2020-07-29T03:50:53.381914Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "dark"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_tmp_warehouse = df_tmp.groupby('Warehouse').sum().reset_index()\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(df_tmp_warehouse[\"Warehouse\"], df_tmp_warehouse[\"Order_Demand\"], label=\"Order_Demand\",\n",
    "      edgecolor=\"k\", color=[\"red\",\"blue\",\"green\",\"yellow\"]);\n",
    "ax.set_xlabel(\"Warehouse\");\n",
    "ax.set_xticks(df_tmp_warehouse[\"Warehouse\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
